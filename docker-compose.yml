version: '3.8'

services:
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    image: mcp-server-template:latest
    container_name: mcp-server
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - MCP_AUTH_TOKEN=${MCP_AUTH_TOKEN:-}
      - DATABASE_URL=${DATABASE_URL:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID:-}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET:-}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID:-}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET:-}
    volumes:
      - ./data:/data
      - ./logs:/logs
      - ./fastmcp.json:/app/fastmcp.json:ro
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: PostgreSQL database
  postgres:
    image: postgres:16-alpine
    container_name: mcp-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=mcp
      - POSTGRES_PASSWORD=${DB_PASSWORD:-mcp_password}
      - POSTGRES_DB=mcp_server
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mcp-network
    profiles:
      - with-database

  # Optional: Redis for caching
  redis:
    image: redis:7-alpine
    container_name: mcp-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - mcp-network
    profiles:
      - with-cache

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: mcp-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - mcp-server
    networks:
      - mcp-network
    profiles:
      - with-proxy

networks:
  mcp-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: